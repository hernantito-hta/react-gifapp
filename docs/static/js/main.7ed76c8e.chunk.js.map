{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categs","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","response","json","data","gifs","map","item","id","images","downsized_medium","title","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","img","GifExpertApp","categories","i","ReactDOM","render","document","getElementById"],"mappings":"2MA+BeA,EA5BK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cACnB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAYA,OACI,sBAAMC,SARW,SAACC,GAClBA,EAAEC,iBACCJ,EAAWK,OAAOC,QAAU,IAC/BR,GAAc,SAAAS,GAAM,OAAKP,GAAL,mBAAoBO,OACxCN,EAAc,MAId,SACI,uBACIO,KAAO,OACPC,MAAST,EACTU,SAhBa,SAACP,GACtBF,EAAcE,EAAEQ,OAAOF,a,+BCNlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,0FAE6EC,UAAUH,GAFvF,sBAGKI,MAAMF,GAHX,cAGbG,EAHa,gBAIEA,EAASC,OAJX,uBAIZC,EAJY,EAIZA,KAEHC,EAAQD,EAAKE,KAAI,SAAAC,GAAS,IAAD,IACzB,MAAO,CACHC,GAAID,EAAKC,GACTT,IAAG,UAAEQ,EAAKE,cAAP,iBAAE,EAAaC,wBAAf,aAAE,EAA+BX,IACpCY,MAAOJ,EAAKI,UAVD,kBAaZN,GAbY,4CAAH,sDCEPO,EAAc,SAAC,GAAsB,IAArBb,EAAoB,EAApBA,IAAKY,EAAe,EAAfA,MAAe,EAARH,GACrC,OACI,sBAAKK,UAAU,yCAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKJ,IACpB,4BACKA,QCHJK,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SACrB,ECFwB,SAACA,GACzB,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAcA,OATAC,qBAAU,WACNxB,EAAQC,GAAUwB,MAAK,SAAAhB,GACnBc,EAAS,CACLf,KAAMC,EACNY,SAAQ,SAGjB,CAACpB,IAEGqB,EDbwBI,CAAazB,GAAhCY,EAAZ,EAAOL,KAAaa,EAApB,EAAoBA,QAEpB,OACI,qCACI,oBAAIJ,UAAU,oCAAd,SAAmDhB,IACjDoB,EAAU,mBAAGJ,UAAU,mCAAb,qBAA8D,GAC1E,qBAAKA,UAAU,YAAf,SAGQJ,EAAOH,KAAI,SAAAiB,GACP,OACI,cAAC,EAAD,eAA8BA,GAAZA,EAAIf,aEenCgB,EA3BM,WACjB,MAAoCzC,mBAAS,CAAC,aAA9C,mBAAO0C,EAAP,KAAmB3C,EAAnB,KAKA,OACI,eAAC,WAAD,WACI,8CACA,cAAC,EAAD,CAAaA,cAAiBA,IAC9B,uBAEA,6BAEQ2C,EAAWnB,KAAI,SAACC,EAAMmB,GAClB,OAAO,cAAC,EAAD,CAEH7B,SAAYU,GADLmB,YCfnCC,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.7ed76c8e.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types'\n\nconst AddCategory = ({ setCategories }) => {\n    const [inputValue, setInputValue] = useState('');\n    const handleInputValue = (e) => {\n        setInputValue(e.target.value);\n    };\n\n    const handleSubmit = (e) =>{\n        e.preventDefault();\n        if(inputValue.trim().length <= 2) return;\n        setCategories(categs => [inputValue, ...categs,]);\n        setInputValue('');\n    };\n\n    return (\n        <form onSubmit = {handleSubmit}>\n            <input\n                type = 'text'\n                value = {inputValue}\n                onChange = {handleInputValue}\n                />\n        </form>\n    );\n};\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n};\n\nexport default AddCategory;","export const getGifs = async (category) => {\n\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=GzMTeyFctqy3kJx7iD1dp6rXAVlbsPLE&q=${ encodeURI(category) }&limit=10`;\n    const response =  await fetch(url);\n    const {data} = await response.json();\n\n    let gifs =  data.map(item => {\n        return {\n            id: item.id,\n            url: item.images?.downsized_medium?.url,\n            title: item.title\n        }\n    });\n    return gifs;\n};","import React from 'react'\n\nexport const GifGridItem = ({url, title, id}) => {\n    return (\n        <div className='card animate__animated animate__fadeIn'>\n            <img src={url} alt={title} />\n            <p>\n                {title}\n            </p>\n        </div>\n    )\n}\n","import React, { Fragment } from 'react';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({category}) => {\n    const {data:images, loading} = useFetchGifs(category);\n\n    return (\n        <>\n            <h3 className='animate__animated animate__fadeIn'>{category}</h3>\n            { loading ? <p className='animate__animated animate__flash'>Loading</p> : ''}\n            <div className='card-grid' >\n                \n                {\n                    images.map(img => {\n                        return (\n                            <GifGridItem key={img.id} {...img}/>\n                        );\n                    })\n                }\n            </div>\n        </>\n    )\n}\n","import { useEffect, useState } from 'react';\nimport {getGifs} from '../helpers/getGifs'\n\nexport const useFetchGifs = (category) => {\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect(() => {\n        getGifs(category).then(gifs => {\n            setState({\n                data: gifs,\n                loading:false\n            });\n        });\n    }, [category])\n\n    return state; // {data:[], loading:true}\n    \n}\n","import React, { Fragment, useState } from 'react';\nimport AddCategory from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nconst GifExpertApp = () => {\n    const [categories, setCategories] = useState(['Hapiness']);\n    // const handleAddItem = (e) => {\n    //     setCategories(categs => [...categs, `Item ${Math.random()}`]);\n    // };\n\n    return (\n        <Fragment>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories = {setCategories} />\n            <hr/>\n            {/* <button onClick={handleAddItem}>Add item</button> */}\n            <ol>\n                {\n                    categories.map((item, i) => {\n                        return <GifGrid\n                            key = {i} \n                            category = {item}\n                            />;\n                    })\n                }\n            </ol>\n\n        </Fragment>\n    );\n};\n\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}